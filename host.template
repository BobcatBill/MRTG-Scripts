# Generic host template for all systems support MIB-II host resources
# MIB.  Will take care of storage devices as well, but watch out for
# changes in enumeration caused by inserting USB devices!

# Watch out for lines being wrapped by broken editing software

$head_lines .= "#---------------------------------------------------------------------\n";

if( $sysdescr =~ /linux/i ) {
  $target_lines .= "routers.cgi*Icon: linux-sm.gif\n";
} elsif( $sysdescr =~ /(windows|microsoft)/i ) {
  $target_lines .= "routers.cgi*Icon: windows-sm.gif\n";
} elsif( $sysdescr =~ /IBM/i ) {
  $target_lines .= "routers.cgi*Icon: aix-sm.gif\n";
} elsif( $sysdescr =~ /(sun|solaris)/i ) {
  $target_lines .= "routers.cgi*Icon: sun-sm.gif\n";
} elsif( $sysdescr =~ /cisco/i ) {
  $target_lines .= "routers.cgi*Icon: cisco-sm.gif\n";
}
$target_lines .= <<ECHO;
#sysdescr = 
#routers.cgi*Description: $router_name ($sysname)
#routers.cgi*ShortDesc: $sysname
#-------------------------------------------------
ECHO

my($cpuoid) = oid_pick($router_connect,$v3opt,"1.3.6.1.4.1.2021.11.11.0");
my($cpuoid1) = oid_pick($router_connect,$v3opt,"1.3.6.1.4.1.9.2.1.58.0");

if($cpuoid) { # this uses the UCD MIB or Cisco MIB
$target_lines .= <<ECHO;


#######################################
# CPU load
Target[$router_name-cpu]: 100 - $cpuoid&$cpuoid:$router_connect
Directory[$router_name-cpu]: $router_name
PageTop[$router_name-cpu]: $router_name CPU usage
Title[$router_name-cpu]: CPU on $router_name
Maxbytes[$router_name-cpu]: 100
Options[$router_name-cpu]: gauge, unknaszero, noo
YLegend[$router_name-cpu]: percent
ShortLegend[$router_name-cpu]: %
LegendI[$router_name-cpu]: CPU Usage:
Legend1[$router_name-cpu]: CPU usage
Legend3[$router_name-cpu]: Peak CPU usage
ECHO


} elsif($cpuoid1) {
$target_lines .= <<ECHO;


#######################################
# CPU load
Target[$router_name-cpu]: $cpuoid1&$cpuoid1:$router_connect
Directory[$router_name-cpu]: $router_name
PageTop[$router_name-cpu]: $router_name CPU usage
Title[$router_name-cpu]: CPU on $router_name
Maxbytes[$router_name-cpu]: 100
Options[$router_name-cpu]: gauge, unknaszero, noo
YLegend[$router_name-cpu]: percent
ShortLegend[$router_name-cpu]: %
LegendI[$router_name-cpu]: CPU Usage:
Legend1[$router_name-cpu]: CPU usage
Legend3[$router_name-cpu]: Peak CPU usage
ECHO


} else { # lets try hrMIB
  my (@cpus) = snmpwalk($router_connect,'1.3.6.1.2.1.25.3.3.1.2');
  foreach my $tmpcpu (@cpus) {
    $tmpcpu =~ /(\d+):\d/;
    my( $instance )=$1;
    my( $target_name )=$router_name.".cpu".$instance;
$target_lines .= <<ECHO;

#######################################
# CPU load
Target[$target_name]: 1.3.6.1.2.1.25.3.3.1.2.$instance&1.3.6.1.2.1.25.3.3.1.2.$instance:$router_connect
Title[$target_name]: $sysname processor $instance
MaxBytes[$target_name]: 100
Options[$target_name]:  gauge, unknaszero, noo
Directory[$target_name]: $directory_name
WithPeak[$target_name]: wmy
YLegend[$target_name]: % Utilisation
ShortLegend[$target_name]: %
Legend1[$target_name]: 1min CPU load on proc$instance
Legend3[$target_name]: Max 5min CPU load on proc$instance
LegendI[$target_name]: Usage CPU $instance:
PageTop[$target_name]: <H1>$sysname Processor Load</H1>
ECHO
    if($#cpus > 0) {
#                $target_lines .= "routers.cgi*Graph[$target_name]: $router_name-allcpu average\n";
#                $target_lines .= "routers.cgi*InMenu[$target_name]: no\n";
        }
  }
  if($#cpus > 0) {
        $target_lines .= <<ECHO;
ECHO


  }
}

my($rmemoid) = oid_pick($router_connect,$v3opt,"1.3.6.1.4.1.2021.4.6.0");
my($smemoid) = oid_pick($router_connect,$v3opt,"1.3.6.1.4.1.2021.4.4.0");

if($rmemoid and $smemoid) { # this uses the UCD MIB
my($maxreal1, $maxswap1) = snmpget($router_connect,
        "1.3.6.1.4.1.2021.4.5.0","1.3.6.1.4.1.2021.4.3.0");
my($maxreal) = $maxreal1 * 1024;
my($maxswap) = $maxswap1 * 1024; 
if($maxswap == 0) {
$maxswap = 1;
}
$target_lines .= <<ECHO;

#######################################
# Memory used
Target[$router_name-cmemory]: $rmemoid&$smemoid:$router_connect * 1024
Directory[$router_name-cmemory]: $router_name
PageTop[$router_name-cmemory]: $router_name Memory Available
Title[$router_name-cmemory]: Available Memory on $router_name
SetEnv[$router_name-cmemory]: MRTG_INT_DESCR="Memory"
MaxBytes1[$router_name-cmemory]: $maxreal
MaxBytes2[$router_name-cmemory]: $maxswap
Options[$router_name-cmemory]: gauge, unknaszero
YLegend[$router_name-cmemory]: Bytes
ShortLegend[$router_name-cmemory]: b
#bb*host[$router_name-cmemory]: $router_name
#bb*svc[$router_name-cmemory]: memory
#bb*red[$router_name-cmemory]: 10%:99999999999
#bb*yellow[$router_name-cmemory]: 15%:99999999998
LegendI[$router_name-cmemory]: real:
LegendO[$router_name-cmemory]: swap:
Legend1[$router_name-cmemory]: Available real memory
Legend2[$router_name-cmemory]: Available swap space
Legend3[$router_name-cmemory]: Peak available real
Legend4[$router_name-cmemory]: Peak available swap

ECHO
}
my (@storage) = snmpwalk($router_connect,'1.3.6.1.2.1.25.2.3.1.4');
my( $fscnt ) = 0;
foreach my $tmps (@storage) {
  $tmps =~ /(\d+):(\d+)/;
  next if(!$2);
  my($instance,$blocksize)=($1,$2);
  my($diskname,$disksize,$disktype) =
  snmpget($router_connect,'1.3.6.1.2.1.25.2.3.1.3.'.$instance,
   '1.3.6.1.2.1.25.2.3.1.5.'.$instance, '1.3.6.1.2.1.25.2.3.1.2.'.$instance);
  $disktype = $1 if($disktype =~ /\.(\d+)$/);
  next if(!$diskname or !$disksize
    or ($disktype!=2 and $disktype!=3 and $disktype!=4));
  my($shortdisk) = $instance;
  $shortdisk = $1 if($diskname =~ /^(\w):/);
  my($target_name)=$router_name.".disk.".$shortdisk;
  my($maxsize)= $disksize * $blocksize;

  if($disktype == 2 ) {      # memory use
        next if($rmemoid); # we already have it
$target_lines .= <<ECHO;

#######################################
# Memory used
Target[$router_name-memory-$instance]: 1.3.6.1.2.1.25.2.3.1.6.$instance&1.3.6.1.2.1.25.2.3.1.5.$instance:$router_connect * $blocksize
Directory[$router_name-memory-$instance]: $router_name
PageTop[$router_name-memory-$instance]: $router_name $diskname Memory Used
Title[$router_name-memory-$instance]: $diskname Memory used on $router_name
SetEnv[$router_name-memory-$instance]: MRTG_INT_DESCR="Memory"
MaxBytes[$router_name-memory-$instance]: $maxsize
Options[$router_name-memory-$instance]: gauge,noo, unknaszero
YLegend[$router_name-memory-$instance]: Bytes
ShortLegend[$router_name-memory-$instance]: b
#bb*host[$router_name-memory-$instance]: $router_name
#bb*svc[$router_name-memory-$instance]: memory
#bb*red[$router_name-memory-$instance]: 90%
#bb*yellow[$router_name-memory-$instance]: 80%
LegendI[$router_name-memory-$instance]: used:
LegendO[$router_name-memory-$instance]: size:
Legend1[$router_name-memory-$instance]: Memory used
Legend2[$router_name-memory-$instance]: Memory total
Legend3[$router_name-memory-$instance]: Peak memory used
Legend4[$router_name-memory-$instance]: Peak memory total

ECHO

  } elsif($disktype == 3 ) { # swap use
        next if($smemoid);

$target_lines .= <<ECHO;

#######################################
# Swap used
Target[$router_name-swap-$instance]: 1.3.6.1.2.1.25.2.3.1.6.$instance&1.3.6.1.2.1.25.2.3.1.5.$instance:$router_connect * $blocksize
Directory[$router_name-swap-$instance]: $router_name
PageTop[$router_name-swap-$instance]: $router_name $diskname Swap space used
Title[$router_name-swap-$instance]: $diskname Swap space used on $router_name
SetEnv[$router_name-swap-$instance]: MRTG_INT_DESCR="Swap"
MaxBytes[$router_name-swap-$instance]: $maxsize
Options[$router_name-swap-$instance]: gauge,noo, unknaszero
YLegend[$router_name-swap-$instance]: Bytes
ShortLegend[$router_name-swap-$instance]: b
#bb*host[$router_name-swap-$instance]: $router_name
#bb*svc[$router_name-swap-$instance]: memory
#bb*red[$router_name-swap-$instance]: 90%
#bb*yellow[$router_name-swap-$instance]: 80%
LegendI[$router_name-swap-$instance]: used:
LegendO[$router_name-swap-$instance]: size:
Legend1[$router_name-swap-$instance]: Swap space used
Legend2[$router_name-swap-$instance]: Swap space total
Legend3[$router_name-swap-$instance]: Peak swap used
Legend4[$router_name-swap-$instance]: Peak swap total

ECHO

  } elsif($disktype == 4 and $shortdisk != 32 ) { # filesystems
    $fscnt += 1;
$target_lines .= <<ECHO;

#######################################
# Filesystem $diskname
Target[$target_name]: 1.3.6.1.2.1.25.2.3.1.6.$instance&1.3.6.1.2.1.25.2.3.1.6.$instance:$router_connect * $blocksize
Directory[$target_name]: $router_name
PageTop[$target_name]: $router_name Disk space used ($diskname)
Title[$target_name]: Disk space used on $router_name ($diskname)
SetEnv[$target_name]: MRTG_INT_DESCR="$diskname"
MaxBytes[$target_name]: $maxsize
Options[$target_name]: gauge,noo, unknaszero
YLegend[$target_name]: Bytes
ShortLegend[$target_name]: b
#bb*host[$target_name]: $router_name
#bb*svc[$target_name]: disk
#bb*red[$target_name]: 90%
#bb*yellow[$target_name]: 85%
LegendI[$target_name]: used:
Legend1[$target_name]: Space used
Legend3[$target_name]: Peak used

ECHO

  }
}

#if($fscnt) {
#$target_lines .= <<ECHO;
#routers.cgi*Options[$router_name-filesystems]: available
#routers.cgi*Icon[$router_name-filesystems]: dir-sm.gif
#routers.cgi*ShortDesc[$router_name-filesystems]: Filesystems
#routers.cgi*Title[$router_name-filesystems]: Filesystems on $router_name
#ECHO
#}

my($laoid) = oid_pick($router_connect,$v3opt,"1.3.6.1.4.1.2021.10.1.5.2");
my($laoid2) = oid_pick($router_connect,$v3opt,"1.3.6.1.4.1.2021.10.1.5.3");
if($laoid and $laoid2) { # this uses the UCD MIB
$target_lines .= <<ECHO;
#######################################
# Load average
Target[$router_name-lavg]: $laoid&$laoid2:$router_connect / 100
Directory[$router_name-lavg]: $router_name
PageTop[$router_name-lavg]: $router_name Load Average
Title[$router_name-lavg]: Load Average on $router_name
SetEnv[$router_name-lavg]: MRTG_INT_DESCR="Load Average"
MaxBytes[$router_name-lavg]: 1000
Options[$router_name-lavg]: nopercent, gauge, unknaszero
YLegend[$router_name-lavg]: Processes
ShortLegend[$router_name-lavg]: &nbsp;
LegendI[$router_name-lavg]: 5min avg:
LegendO[$router_name-lavg]: 15min avg:
Legend1[$router_name-lavg]: 5-min load average
Legend2[$router_name-lavg]: 15-min load average
Legend3[$router_name-lavg]: Peak 5-min load average
Legend4[$router_name-lavg]: Peak 15-min load average
ECHO
}

my($ucoid) = oid_pick($router_connect,$v3opt,"1.3.6.1.2.1.25.1.5.0");
if($ucoid) {
$target_lines .= <<ECHO;
#######################################
# User count
Target[$router_name-users]: $ucoid&$ucoid:$router_connect
Directory[$router_name-users]: $router_name
PageTop[$router_name-users]: $router_name Active users
Title[$router_name-users]: Active Users on $router_name
MaxBytes[$router_name-users]: 1000
SetEnv[$router_name-users]: MRTG_INT_DESCR="Users"
Options[$router_name-users]: nopercent, gauge, unknaszero
YLegend[$router_name-users]: Users
ShortLegend[$router_name-users]: &nbsp;
LegendI[$router_name-users]: Users
Legend1[$router_name-users]: Active Users
Legend3[$router_name-users]: Peak Active Users
ECHO
}

my($proid) = oid_pick($router_connect,$v3opt,"1.3.6.1.2.1.25.1.6.0");
if($proid) {
my($maxpr) = snmpget($router_connect, "1.3.6.1.2.1.25.1.7.0");
$target_lines .= <<ECHO;
#######################################
# Process count
Target[$router_name-procs]: $proid&$proid:$router_connect
Directory[$router_name-procs]: $router_name
PageTop[$router_name-procs]: $router_name Processes
Title[$router_name-procs]: Processes on $router_name
ECHO
if($maxpr) {
        $target_lines .= "MaxBytes[$router_name-procs]: $maxpr\n";
} else {
        $target_lines .= "MaxBytes[$router_name-procs]: 10000\n";
}
$target_lines .=
  "routers.cgi*Options[$router_name-procs]: nototal, fixunit, noo"
  .($maxpr?"":", nomax")."\n";
$target_lines .= <<ECHO;
SetEnv[$router_name-procs]: MRTG_INT_DESCR="Procs"
Options[$router_name-procs]: nopercent, gauge, unknaszero
YLegend[$router_name-procs]: Processes
ShortLegend[$router_name-procs]: &nbsp;
LegendI[$router_name-procs]: Procs
Legend1[$router_name-procs]: Processes
Legend3[$router_name-procs]: Peak Processes
ECHO
}

my($f10temp) = oid_pick($router_connect,$v3opt,"1.3.6.1.4.1.6027.3.10.1.2.2.1.14.1");
if($f10temp) {
$target_lines .= <<ECHO;
########################################
# Force 10 Temperature
Target[$router_name-f10temp]: $f10temp&$f10temp:$router_connect * 1.8 + 32
Directory[$router_name-f10temp]: $router_name
PageTop[$router_name-f10temp]: $router_name Temperature
Title[$router_name-f10temp]: Temperature on $router_name
MaxBytes[$router_name-f10temp]: 250
SetEnv[$router_name-f10temp]: MRTG_INT_DESCR="Temperature"
Options[$router_name-f10temp]: nopercent, gauge, noo, unknaszero
YLegend[$router_name-f10temp]: Temperature
ShortLegend[$router_name-f10temp]: &nbsp;
LegendI[$router_name-f10temp]: Temperature
Legend1[$router_name-f10temp]: Farenheit
#######################################
# Force 10 CPU
Target[$router_name-f10cpu]: 1.3.6.1.4.1.6027.3.10.1.2.9.1.3.1&1.3.6.1.4.1.6027.3.10.1.2.9.1.4.1:$router_connect
Directory[$router_name-f10cpu]: $router_name
PageTop[$router_name-f10cpu]: $router_name CPU Usage
Title[$router_name-f10cpu]: CPU Usage on $router_name
MaxBytes[$router_name-f10cpu]: 100
SetEnv[$router_name-f10cpu]: MRTG_INT_DESCR="CPU"
Options[$router_name-f10cpu]: nopercent, gauge, unknaszero
YLegend[$router_name-f10cpu]: Percent
Legend1[$router_name-f10cpu]: CPU utilization in percentage for last 1 minute
Legend2[$router_name-f10cpu]: CPU utilization in percentage for last 5 minutes
LegendI[$router_name-f10cpu]: 1 min avg:
LegendO[$router_name-f10cpu]: 5 min avg:
#######################################
# Force 10 Memory
Target[$router_name-f10mem]: 1.3.6.1.4.1.6027.3.10.1.2.9.1.5.1&1.3.6.1.4.1.6027.3.10.1.2.9.1.5.1:$router_connect
Directory[$router_name-f10mem]: $router_name
PageTop[$router_name-f10mem]: $router_name Memory Usage
Title[$router_name-f10mem]: Memory Usage on $router_name
MaxBytes[$router_name-f10mem]: 100
SetEnv[$router_name-f10mem]: MRTG_INT_DESCR="Memory"
Options[$router_name-f10mem]: nopercent, gauge, unknaszero,noo
YLegend[$router_name-f10mem]: Percent
Legend1[$router_name-f10mem]: Stack member total memory usage in percentage
LegendI[$router_name-f10mem]: Memory Usage:
ECHO
}

my($procurve_mem) = snmpget($router_connect,"1.3.6.1.4.1.11.2.14.11.5.1.1.2.1.1.1.5.1");
if($procurve_mem) {
$target_lines .= <<ECHO;
########################################
# ProCurve CPU
Target[$router_name-cpu]: 1.3.6.1.4.1.11.2.14.11.5.1.9.6.1.0&1.3.6.1.4.1.11.2.14.11.5.1.9.6.1.0:$router_connect
Directory[$router_name-cpu]: $router_name
PageTop[$router_name-cpu]: $router_name CPU Usage
Title[$router_name-cpu]: CPU Usage on $router_name
MaxBytes[$router_name-cpu]: 100
SetEnv[$router_name-cpu]: MRTG_INT_DESCR="CPU"
Options[$router_name-cpu]: nopercent, gauge, unknaszero, noo
YLegend[$router_name-cpu]: Percent
Legend1[$router_name-cpu]: CPU utilization in percentage
LegendI[$router_name-cpu]: 1 min avg:
#######################################
# ProCurve Memory
Target[$router_name-mem]: 1.3.6.1.4.1.11.2.14.11.5.1.1.2.1.1.1.7.1&1.3.6.1.4.1.11.2.14.11.5.1.1.2.1.1.1.7.1:$router_connect
Directory[$router_name-mem]: $router_name
PageTop[$router_name-mem]: $router_name Memory Usage
Title[$router_name-mem]: Memory Usage on $router_name
MaxBytes[$router_name-mem]: $procurve_mem
SetEnv[$router_name-mem]: MRTG_INT_DESCR="Memory"
Options[$router_name-mem]: gauge, unknaszero,noo
YLegend[$router_name-mem]: Bytes
Legend1[$router_name-mem]: Stack member total memory usage in percentage
LegendI[$router_name-mem]: Memory Usage:
ECHO
}
